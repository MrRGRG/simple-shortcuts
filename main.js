/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MyPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.addCommand({
        id: "heading-level-one",
        name: "Heading level one",
        editorCallback: (editor, view) => {
          const curs = editor.getCursor("head");
          curs.ch = 0;
          editor.replaceRange("# ", curs, curs);
        },
        hotkeys: [{ modifiers: ["Mod"], key: "1" }]
      });
      this.addCommand({
        id: "heading-level-two",
        name: "Heading level two",
        editorCallback: (editor, view) => {
          const curs = editor.getCursor("head");
          curs.ch = 0;
          editor.replaceRange("## ", curs, curs);
        },
        hotkeys: [{ modifiers: ["Mod"], key: "2" }]
      });
      this.addCommand({
        id: "heading-level-three",
        name: "Heading level three",
        editorCallback: (editor, view) => {
          const curs = editor.getCursor("head");
          curs.ch = 0;
          editor.replaceRange("### ", curs, curs);
        },
        hotkeys: [{ modifiers: ["Mod"], key: "3" }]
      });
      this.addCommand({
        id: "heading-level-four",
        name: "Heading level four",
        editorCallback: (editor, view) => {
          const curs = editor.getCursor("head");
          curs.ch = 0;
          editor.replaceRange("#### ", curs, curs);
        },
        hotkeys: [{ modifiers: ["Mod"], key: "4" }]
      });
      this.addCommand({
        id: "heading-level-five",
        name: "Heading level five",
        editorCallback: (editor, view) => {
          const curs = editor.getCursor("head");
          curs.ch = 0;
          editor.replaceRange("##### ", curs, curs);
        },
        hotkeys: [{ modifiers: ["Mod"], key: "5" }]
      });
      this.addCommand({
        id: "heading-level-six",
        name: "Heading level six",
        editorCallback: (editor, view) => {
          const curs = editor.getCursor("head");
          curs.ch = 0;
          editor.replaceRange("###### ", curs, curs);
        },
        hotkeys: [{ modifiers: ["Mod"], key: "6" }]
      });
    });
  }
};
